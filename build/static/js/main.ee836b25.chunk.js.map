{"version":3,"sources":["api/token.js","api/getConfig.js","api/api.js","App.js","reportWebVitals.js","index.js"],"names":["instance_id","client_id","resource","params","URLSearchParams","append","getToken","axios","post","headers","a","config","get","then","res","data","d","results","getConfig","calendarConfig","req","forEach","i","push","SiteUrl","Url","Title","Promise","all","calendars","key","Id","getEvents","localizer","momentLocalizer","moment","loadEvents","App","useAsync","promiseFn","error","isLoading","message","dt","Date","startDate","getFullYear","endDate","parsedArray","spEventsParser","parseEvents","events","map","event","start","EventDate","end","EndDate","eventClasses","title","description","Description","blockColor","Color","Object","keys","className","style","backgroundColor","startAccessor","endAccessor","height","views","eventPropGetter","background","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee836b25.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst site = \"chironitcom.sharepoint.com\";\r\nconst grant_type = \"client_credentials\";\r\nconst instance_id = \"9f6a57fa-dde1-4400-a1f5-92364f43ed31\";\r\nconst client_id = `48e2a3d8-8e53-4813-8072-098dc88f5df3@${instance_id}`;\r\nconst client_secret = \"GT85uijE9wRHaGAJWVkHWzu3oCwZW3um2YmJV+0xZnI=\";\r\nconst resource = `00000003-0000-0ff1-ce00-000000000000/${site}@${instance_id}`\r\n\r\nconst params = new URLSearchParams()\r\nparams.append('grant_type', grant_type)\r\nparams.append('resource', resource)\r\nparams.append('client_id', client_id)\r\nparams.append('client_secret', client_secret)\r\n\r\nfunction getToken() {\r\n    return axios.post(\"https://accounts.accesscontrol.windows.net/9f6a57fa-dde1-4400-a1f5-92364f43ed31/tokens/OAuth/2\", params, {\r\n        headers: {\r\n            // \"Accept\": \"application/json; odata=verbose\",\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        }\r\n    });\r\n}\r\nexport default getToken;","import axios from \"axios\";\r\nimport getToken from \"./token\";\r\n\r\nasync function getConfig() {\r\n    let config = {\r\n        headers: {\r\n            \"Accept\": \"application/json; odata=verbose\",\r\n            // \"Authorization\": `Bearer ${await getToken()}`\r\n        }\r\n    }\r\n    return axios.get(\"https://dvagov.sharepoint.com/sites/VAFMBT/_api/web/lists/getbytitle('CalendarConfig')/items\", config).then(res => {\r\n        return res.data.d.results;\r\n    });\r\n}\r\n\r\nexport default getConfig;","\r\nimport axios from \"axios\";\r\nimport getToken from \"./token\";\r\nimport getConfig from \"./getConfig\";\r\n\r\n// function Api() {\r\n//     return {\r\n//         getEvents: getEvents\r\n//     };\r\n// }\r\n\r\nasync function getEvents() {\r\n    let calendarConfig = await getConfig();\r\n\r\n    let config = {\r\n        headers: {\r\n            \"Accept\": \"application/json; odata=verbose\",\r\n            \"Authorization\": `Bearer ${await getToken()}`\r\n        }\r\n    }\r\n\r\n    let req = [];\r\n    calendarConfig.forEach(i => {\r\n        req.push(axios.get(`${i.SiteUrl.Url}/_api/web/lists/getbytitle('${i.Title}')/items?$select=*,Duration,RecurrenceData`, config).then(res => res.data.d.results));\r\n    });\r\n    return Promise.all(req).then(res => {\r\n        let calendars = {};\r\n        calendarConfig.forEach((i, key) => {\r\n            calendars[i.Id] = res[key];\r\n        });\r\n        return {\r\n            config: calendarConfig,\r\n            calendars: calendars\r\n        };\r\n    });\r\n}\r\n\r\n\r\n\r\nexport default getEvents;","import './App.css';\nimport { useAsync } from 'react-async';\nimport { Calendar, momentLocalizer } from 'react-big-calendar'\nimport moment from 'moment'\nimport spEventsParser from \"sharepoint-events-parser\";\n\nimport getEvents from \"./api/api\"\nconst localizer = momentLocalizer(moment)\n\n// const events = [\n//   {\n//     start: '2021-04-02',\n//     end: '2021-04-02',\n//     eventClasses: 'optionalEvent',\n//     title: 'test event',\n//     description: 'This is a test description of an event',\n//   },\n//   {\n//     start: '2021-04-02',\n//     end: '2021-04-25',\n//     title: 'test event',\n//     description: 'This is a test description of an event',\n//     data: 'you can add what ever random data you may want to use later',\n//   },\n// ];\n\nconst loadEvents = async () =>  await getEvents();\n\nfunction App() {\n  const { data, error, isLoading } = useAsync({ promiseFn: loadEvents });\n  if (isLoading) return \"Loading...\"\n  if (error) return `Something went wrong: ${error.message}`\n  if (data) {\n    data.config.forEach((i, key) => {\n      let dt = new Date();\n      let startDate = new Date(dt.getFullYear(), 0, 1); //start from the 25th of last month\n      let endDate = new Date(dt.getFullYear(), 11, 21);\n      let parsedArray = spEventsParser.parseEvents(data.calendars[i.Id], startDate, endDate);\n      parsedArray = parseEvents(parsedArray, i);\n      data.calendars[i.Id] = parsedArray;\n  });\n    // const parsedArray = spEventsParser.parseEvents(data.data.d.results);\n    let events = [];\n    Object.keys(data.calendars).map(key => {\n      events = [...events, ...data.calendars[key]];\n    });\n    return (\n      <div className=\"App\">\n        <div className=\"calendar-history\">\n          {data.config.map(i => {\n            return (<div className=\"history-item\" style={{backgroundColor: i.Color}}>\n              {i.Title}\n            </div>);\n          })}\n        </div>\n        <div>\n          <Calendar\n            localizer={localizer}\n            events={events}\n            startAccessor=\"start\"\n            endAccessor=\"end\"\n            style={{ height: 700 }}\n            views={['month', 'week', 'day']}\n            eventPropGetter={(event) => {return {\n              className: event.className,\n              style: {background: event.blockColor}\n            }}}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\n\nfunction parseEvents(events, config) {\n  return events.map(event => {\n    event.start = event.EventDate;\n    event.end = event.EndDate;\n    event.eventClasses = 'optionalEvent';\n    event.title = event.Title;\n    event.description = event.Description;\n    event.blockColor = config.Color;\n    return event;\n  });\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}